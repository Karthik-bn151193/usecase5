#Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/d1239e1f-ad4a-4b22-811d-888ac43d2266/terraform-bin plan -no-color -lock=false
module.lambda_add.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003]
module.lambda_retrieve.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004]
module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-add-role20250418122135669100000001-20250418122136684100000006]
module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002-20250418122136452400000005]
module.lambda_add.aws_iam_role.lambda_role: Refreshing state... [id=user-data-add-role20250418122135669100000001]
module.dynamodb_table.aws_dynamodb_table.main: Refreshing state... [id=UserDataTable]
module.lambda_retrieve.aws_iam_role.lambda_role: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  - destroy

Terraform will perform the following actions:

  # aws_security_group.ec2-sg will be created
  + resource "aws_security_group" "ec2-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "server"
        }
      + tags_all               = {
          + "Name" = "server"
        }
      + vpc_id                 = "vpc-0feb09ec941ba1ac9"
    }

  # module.dynamodb_table.aws_dynamodb_table.main will be destroyed
  # (because aws_dynamodb_table.main is not in configuration)
  - resource "aws_dynamodb_table" "main" {
      - arn                         = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null
      - billing_mode                = "PAY_PER_REQUEST" -> null
      - deletion_protection_enabled = false -> null
      - hash_key                    = "UserID" -> null
      - id                          = "UserDataTable" -> null
      - name                        = "UserDataTable" -> null
      - read_capacity               = 0 -> null
      - stream_enabled              = false -> null
      - table_class                 = "STANDARD" -> null
      - tags                        = {
          - "Environment" = "dev"
        } -> null
      - tags_all                    = {
          - "Environment" = "dev"
        } -> null
      - write_capacity              = 0 -> null
        # (3 unchanged attributes hidden)

      - attribute {
          - name = "UserID" -> null
          - type = "S" -> null
        }

      - point_in_time_recovery {
          - enabled = false -> null
        }

      - ttl {
          - enabled        = false -> null
            # (1 unchanged attribute hidden)
        }
    }

  # module.ec2_instance.aws_instance.server will be created
  + resource "aws_instance" "server" {
      + ami                                  = "ami-084568db4383264d4"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "useast"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "server"
        }
      + tags_all                             = {
          + "Name" = "server"
        }
      + tenancy                              = (known after apply)
      + user_data                            = "0bb66253965fd352048926f2f17da5f0bf35b2cc"
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # module.lambda_add.aws_iam_policy.lambda_policy will be destroyed
  # (because aws_iam_policy.lambda_policy is not in configuration)
  - resource "aws_iam_policy" "lambda_policy" {
      - arn              = "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003" -> null
      - attachment_count = 1 -> null
      - id               = "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003" -> null
      - name             = "user-data-add-policy20250418122135737400000003" -> null
      - name_prefix      = "user-data-add-policy" -> null
      - path             = "/" -> null
      - policy           = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                          - "dynamodb:PutItem",
                          - "dynamodb:GetItem",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-add:*",
                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",
                        ]
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id        = "ANPA5YODGS4BPPXOAS6CU" -> null
      - tags             = {} -> null
      - tags_all         = {} -> null
        # (1 unchanged attribute hidden)
    }

  # module.lambda_add.aws_iam_role.lambda_role will be destroyed
  # (because aws_iam_role.lambda_role is not in configuration)
  - resource "aws_iam_role" "lambda_role" {
      - arn                   = "arn:aws:iam::945839052546:role/user-data-add-role20250418122135669100000001" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-18T12:21:35Z" -> null
      - force_detach_policies = false -> null
      - id                    = "user-data-add-role20250418122135669100000001" -> null
      - managed_policy_arns   = [
          - "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003",
        ] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "user-data-add-role20250418122135669100000001" -> null
      - name_prefix           = "user-data-add-role" -> null
      - path                  = "/" -> null
      - tags                  = {} -> null
      - tags_all              = {} -> null
      - unique_id             = "AROA5YODGS4BBMVK7Z265" -> null
        # (2 unchanged attributes hidden)
    }

  # module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed
  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)
  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
      - id         = "user-data-add-role20250418122135669100000001-20250418122136684100000006" -> null
      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003" -> null
      - role       = "user-data-add-role20250418122135669100000001" -> null
    }

  # module.lambda_retrieve.aws_iam_policy.lambda_policy will be destroyed
  # (because aws_iam_policy.lambda_policy is not in configuration)
  - resource "aws_iam_policy" "lambda_policy" {
      - arn              = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004" -> null
      - attachment_count = 1 -> null
      - id               = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004" -> null
      - name             = "user-data-retrieve-policy20250418122135804600000004" -> null
      - name_prefix      = "user-data-retrieve-policy" -> null
      - path             = "/" -> null
      - policy           = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                          - "dynamodb:PutItem",
                          - "dynamodb:GetItem",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-retrieve:*",
                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",
                        ]
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id        = "ANPA5YODGS4BHWGALY5GO" -> null
      - tags             = {} -> null
      - tags_all         = {} -> null
        # (1 unchanged attribute hidden)
    }

  # module.lambda_retrieve.aws_iam_role.lambda_role will be destroyed
  # (because aws_iam_role.lambda_role is not in configuration)
  - resource "aws_iam_role" "lambda_role" {
      - arn                   = "arn:aws:iam::945839052546:role/user-data-retrieve-role20250418122135670300000002" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-18T12:21:35Z" -> null
      - force_detach_policies = false -> null
      - id                    = "user-data-retrieve-role20250418122135670300000002" -> null
      - managed_policy_arns   = [
          - "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004",
        ] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "user-data-retrieve-role20250418122135670300000002" -> null
      - name_prefix           = "user-data-retrieve-role" -> null
      - path                  = "/" -> null
      - tags                  = {} -> null
      - tags_all              = {} -> null
      - unique_id             = "AROA5YODGS4BEQI57VHXU" -> null
        # (2 unchanged attributes hidden)
    }

  # module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed
  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)
  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
      - id         = "user-data-retrieve-role20250418122135670300000002-20250418122136452400000005" -> null
      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004" -> null
      - role       = "user-data-retrieve-role20250418122135670300000002" -> null
    }

Plan: 2 to add, 0 to change, 7 to destroy.

Changes to Outputs:
  - dynamodb_table_arn = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: module.lambda_add.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003]%0Amodule.lambda_retrieve.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004]%0Amodule.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-add-role20250418122135669100000001-20250418122136684100000006]%0Amodule.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002-20250418122136452400000005]%0Amodule.lambda_add.aws_iam_role.lambda_role: Refreshing state... [id=user-data-add-role20250418122135669100000001]%0Amodule.dynamodb_table.aws_dynamodb_table.main: Refreshing state... [id=UserDataTable]%0Amodule.lambda_retrieve.aws_iam_role.lambda_role: Refreshing state... [id=user-data-retrieve-role20250418122135670300000002]%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  + create%0A  - destroy%0A%0ATerraform will perform the following actions:%0A%0A  # aws_security_group.ec2-sg will be created%0A  + resource "aws_security_group" "ec2-sg" {%0A      + arn                    = (known after apply)%0A      + description            = "Managed by Terraform"%0A      + egress                 = [%0A          + {%0A              + cidr_blocks      = [%0A                  + "0.0.0.0/0",%0A                ]%0A              + from_port        = 0%0A              + ipv6_cidr_blocks = []%0A              + prefix_list_ids  = []%0A              + protocol         = "-1"%0A              + security_groups  = []%0A              + self             = false%0A              + to_port          = 0%0A                # (1 unchanged attribute hidden)%0A            },%0A        ]%0A      + id                     = (known after apply)%0A      + ingress                = [%0A          + {%0A              + cidr_blocks      = [%0A                  + "0.0.0.0/0",%0A                ]%0A              + from_port        = 22%0A              + ipv6_cidr_blocks = []%0A              + prefix_list_ids  = []%0A              + protocol         = "tcp"%0A              + security_groups  = []%0A              + self             = false%0A              + to_port          = 22%0A                # (1 unchanged attribute hidden)%0A            },%0A          + {%0A              + cidr_blocks      = [%0A                  + "0.0.0.0/0",%0A                ]%0A              + from_port        = 80%0A              + ipv6_cidr_blocks = []%0A              + prefix_list_ids  = []%0A              + protocol         = "tcp"%0A              + security_groups  = []%0A              + self             = false%0A              + to_port          = 80%0A                # (1 unchanged attribute hidden)%0A            },%0A        ]%0A      + name                   = (known after apply)%0A      + name_prefix            = (known after apply)%0A      + owner_id               = (known after apply)%0A      + revoke_rules_on_delete = false%0A      + tags                   = {%0A          + "Name" = "server"%0A        }%0A      + tags_all               = {%0A          + "Name" = "server"%0A        }%0A      + vpc_id                 = "vpc-0feb09ec941ba1ac9"%0A    }%0A%0A  # module.dynamodb_table.aws_dynamodb_table.main will be destroyed%0A  # (because aws_dynamodb_table.main is not in configuration)%0A  - resource "aws_dynamodb_table" "main" {%0A      - arn                         = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null%0A      - billing_mode                = "PAY_PER_REQUEST" -> null%0A      - deletion_protection_enabled = false -> null%0A      - hash_key                    = "UserID" -> null%0A      - id                          = "UserDataTable" -> null%0A      - name                        = "UserDataTable" -> null%0A      - read_capacity               = 0 -> null%0A      - stream_enabled              = false -> null%0A      - table_class                 = "STANDARD" -> null%0A      - tags                        = {%0A          - "Environment" = "dev"%0A        } -> null%0A      - tags_all                    = {%0A          - "Environment" = "dev"%0A        } -> null%0A      - write_capacity              = 0 -> null%0A        # (3 unchanged attributes hidden)%0A%0A      - attribute {%0A          - name = "UserID" -> null%0A          - type = "S" -> null%0A        }%0A%0A      - point_in_time_recovery {%0A          - enabled = false -> null%0A        }%0A%0A      - ttl {%0A          - enabled        = false -> null%0A            # (1 unchanged attribute hidden)%0A        }%0A    }%0A%0A  # module.ec2_instance.aws_instance.server will be created%0A  + resource "aws_instance" "server" {%0A      + ami                                  = "ami-084568db4383264d4"%0A      + arn                                  = (known after apply)%0A      + associate_public_ip_address          = (known after apply)%0A      + availability_zone                    = (known after apply)%0A      + cpu_core_count                       = (known after apply)%0A      + cpu_threads_per_core                 = (known after apply)%0A      + disable_api_stop                     = (known after apply)%0A      + disable_api_termination              = (known after apply)%0A      + ebs_optimized                        = (known after apply)%0A      + enable_primary_ipv6                  = (known after apply)%0A      + get_password_data                    = false%0A      + host_id                              = (known after apply)%0A      + host_resource_group_arn              = (known after apply)%0A      + iam_instance_profile                 = (known after apply)%0A      + id                                   = (known after apply)%0A      + instance_initiated_shutdown_behavior = (known after apply)%0A      + instance_lifecycle                   = (known after apply)%0A      + instance_state                       = (known after apply)%0A      + instance_type                        = "t2.micro"%0A      + ipv6_address_count                   = (known after apply)%0A      + ipv6_addresses                       = (known after apply)%0A      + key_name                             = "useast"%0A      + monitoring                           = (known after apply)%0A      + outpost_arn                          = (known after apply)%0A      + password_data                        = (known after apply)%0A      + placement_group                      = (known after apply)%0A      + placement_partition_number           = (known after apply)%0A      + primary_network_interface_id         = (known after apply)%0A      + private_dns                          = (known after apply)%0A      + private_ip                           = (known after apply)%0A      + public_dns                           = (known after apply)%0A      + public_ip                            = (known after apply)%0A      + secondary_private_ips                = (known after apply)%0A      + security_groups                      = (known after apply)%0A      + source_dest_check                    = true%0A      + spot_instance_request_id             = (known after apply)%0A      + subnet_id                            = (known after apply)%0A      + tags                                 = {%0A          + "Name" = "server"%0A        }%0A      + tags_all                             = {%0A          + "Name" = "server"%0A        }%0A      + tenancy                              = (known after apply)%0A      + user_data                            = "0bb66253965fd352048926f2f17da5f0bf35b2cc"%0A      + user_data_base64                     = (known after apply)%0A      + user_data_replace_on_change          = false%0A      + vpc_security_group_ids               = (known after apply)%0A%0A      + capacity_reservation_specification (known after apply)%0A%0A      + cpu_options (known after apply)%0A%0A      + ebs_block_device (known after apply)%0A%0A      + enclave_options (known after apply)%0A%0A      + ephemeral_block_device (known after apply)%0A%0A      + instance_market_options (known after apply)%0A%0A      + maintenance_options (known after apply)%0A%0A      + metadata_options (known after apply)%0A%0A      + network_interface (known after apply)%0A%0A      + private_dns_name_options (known after apply)%0A%0A      + root_block_device (known after apply)%0A    }%0A%0A  # module.lambda_add.aws_iam_policy.lambda_policy will be destroyed%0A  # (because aws_iam_policy.lambda_policy is not in configuration)%0A  - resource "aws_iam_policy" "lambda_policy" {%0A      - arn              = "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003" -> null%0A      - attachment_count = 1 -> null%0A      - id               = "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003" -> null%0A      - name             = "user-data-add-policy20250418122135737400000003" -> null%0A      - name_prefix      = "user-data-add-policy" -> null%0A      - path             = "/" -> null%0A      - policy           = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action   = [%0A                          - "logs:CreateLogGroup",%0A                          - "logs:CreateLogStream",%0A                          - "logs:PutLogEvents",%0A                          - "dynamodb:PutItem",%0A                          - "dynamodb:GetItem",%0A                        ]%0A                      - Effect   = "Allow"%0A                      - Resource = [%0A                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-add:*",%0A                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",%0A                        ]%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - policy_id        = "ANPA5YODGS4BPPXOAS6CU" -> null%0A      - tags             = {} -> null%0A      - tags_all         = {} -> null%0A        # (1 unchanged attribute hidden)%0A    }%0A%0A  # module.lambda_add.aws_iam_role.lambda_role will be destroyed%0A  # (because aws_iam_role.lambda_role is not in configuration)%0A  - resource "aws_iam_role" "lambda_role" {%0A      - arn                   = "arn:aws:iam::945839052546:role/user-data-add-role20250418122135669100000001" -> null%0A      - assume_role_policy    = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "sts:AssumeRole"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - Service = "lambda.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - create_date           = "2025-04-18T12:21:35Z" -> null%0A      - force_detach_policies = false -> null%0A      - id                    = "user-data-add-role20250418122135669100000001" -> null%0A      - managed_policy_arns   = [%0A          - "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003",%0A        ] -> null%0A      - max_session_duration  = 3600 -> null%0A      - name                  = "user-data-add-role20250418122135669100000001" -> null%0A      - name_prefix           = "user-data-add-role" -> null%0A      - path                  = "/" -> null%0A      - tags                  = {} -> null%0A      - tags_all              = {} -> null%0A      - unique_id             = "AROA5YODGS4BBMVK7Z265" -> null%0A        # (2 unchanged attributes hidden)%0A    }%0A%0A  # module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed%0A  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)%0A  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {%0A      - id         = "user-data-add-role20250418122135669100000001-20250418122136684100000006" -> null%0A      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-add-policy20250418122135737400000003" -> null%0A      - role       = "user-data-add-role20250418122135669100000001" -> null%0A    }%0A%0A  # module.lambda_retrieve.aws_iam_policy.lambda_policy will be destroyed%0A  # (because aws_iam_policy.lambda_policy is not in configuration)%0A  - resource "aws_iam_policy" "lambda_policy" {%0A      - arn              = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004" -> null%0A      - attachment_count = 1 -> null%0A      - id               = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004" -> null%0A      - name             = "user-data-retrieve-policy20250418122135804600000004" -> null%0A      - name_prefix      = "user-data-retrieve-policy" -> null%0A      - path             = "/" -> null%0A      - policy           = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action   = [%0A                          - "logs:CreateLogGroup",%0A                          - "logs:CreateLogStream",%0A                          - "logs:PutLogEvents",%0A                          - "dynamodb:PutItem",%0A                          - "dynamodb:GetItem",%0A                        ]%0A                      - Effect   = "Allow"%0A                      - Resource = [%0A                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-retrieve:*",%0A                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",%0A                        ]%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - policy_id        = "ANPA5YODGS4BHWGALY5GO" -> null%0A      - tags             = {} -> null%0A      - tags_all         = {} -> null%0A        # (1 unchanged attribute hidden)%0A    }%0A%0A  # module.lambda_retrieve.aws_iam_role.lambda_role will be destroyed%0A  # (because aws_iam_role.lambda_role is not in configuration)%0A  - resource "aws_iam_role" "lambda_role" {%0A      - arn                   = "arn:aws:iam::945839052546:role/user-data-retrieve-role20250418122135670300000002" -> null%0A      - assume_role_policy    = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "sts:AssumeRole"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - Service = "lambda.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - create_date           = "2025-04-18T12:21:35Z" -> null%0A      - force_detach_policies = false -> null%0A      - id                    = "user-data-retrieve-role20250418122135670300000002" -> null%0A      - managed_policy_arns   = [%0A          - "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004",%0A        ] -> null%0A      - max_session_duration  = 3600 -> null%0A      - name                  = "user-data-retrieve-role20250418122135670300000002" -> null%0A      - name_prefix           = "user-data-retrieve-role" -> null%0A      - path                  = "/" -> null%0A      - tags                  = {} -> null%0A      - tags_all              = {} -> null%0A      - unique_id             = "AROA5YODGS4BEQI57VHXU" -> null%0A        # (2 unchanged attributes hidden)%0A    }%0A%0A  # module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed%0A  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)%0A  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {%0A      - id         = "user-data-retrieve-role20250418122135670300000002-20250418122136452400000005" -> null%0A      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250418122135804600000004" -> null%0A      - role       = "user-data-retrieve-role20250418122135670300000002" -> null%0A    }%0A%0APlan: 2 to add, 0 to change, 7 to destroy.%0A%0AChanges to Outputs:%0A  - dynamodb_table_arn = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null%0A%0A─────────────────────────────────────────────────────────────────────────────%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
